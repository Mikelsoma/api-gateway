import groovy.json.JsonSlurper

buildscript {
  repositories {
    maven { url "http://oss.jfrog.org/artifactory/repo" }
    jcenter()
  }
  dependencies {
    classpath "io.ratpack:ratpack-gradle:0.9.8"
    classpath 'com.bluepapa32:gradle-watch-plugin:0.1.3'
    classpath 'jp.tomorrowkey.gradle.notifier:notifier-plugin:+'
  }
}

apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "watch"
apply plugin: "notifier-plugin"

repositories {
  maven { url "http://oss.jfrog.org/artifactory/repo" }
  jcenter()
  maven { url "http://repo.springsource.org/repo" } // for springloaded
}

dependencies {
  // SpringLoaded enables runtime hot reloading.
  // It is not part of the app runtime and is not shipped in the distribution.
  springloaded "org.springframework:springloaded:1.2.0.RELEASE"

  // Add monitoring 
  compile ratpack.dependency("codahale-metrics")
  // Add RxJava - async operations
  compile ratpack.dependency("rx")

  // Default SLF4J binding.  Note that this is a blocking implementation.
  // See here for a non blocking appender http://logging.apache.org/log4j/2.x/manual/async.html
  //runtime 'org.slf4j:slf4j-simple:1.7.7'
  // Added async logging - log4j2 became async logger
  runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.0.2'
  runtime 'org.apache.logging.log4j:log4j-api:2.0.2'
  runtime 'org.apache.logging.log4j:log4j-core:2.0.2'

  // Add HTTPBuilder dependency
  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'

  // Add reds client library
  compile 'redis.clients:jedis:2.6.0'

  testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
  testCompile ratpack.dependency("remote-test")
}

watch {
  groovy {
    files fileTree(dir: "src/main/groovy", include: "**/*.groovy")
    tasks "classes"
  }
}

run {
  // change port for ratpack webserver
  //jvmArgs "-Dratpack.port=8080"

  // set JMX attributes for jvm process running ratpack application
  jvmArgs "-Dcom.sun.management.jmxremote"
  jvmArgs "-Dcom.sun.management.jmxremote.port=5999"
  jvmArgs "-Dcom.sun.management.jmxremote.local.only=false"
  jvmArgs "-Dcom.sun.management.jmxremote.authenticate=false"
  jvmArgs "-Dcom.sun.management.jmxremote.ssl=false"
  jvmArgs "-Dcom.sun.management.jmxremote.rmi.port=5998"
}

installApp {
  // set JVM options for ratpack app distribution
  applicationDefaultJvmArgs = [
    "-Dcom.sun.management.jmxremote",
    "-Dcom.sun.management.jmxremote.port=5999",
    "-Dcom.sun.management.jmxremote.local.only=false",
    "-Dcom.sun.management.jmxremote.authenticate=false",
    "-Dcom.sun.management.jmxremote.ssl=false",
    "-Dcom.sun.management.jmxremote.rmi.port=5998"
  ]
}

/* task startMounteBank(type: ExecWait) { */
/*   command "mb --loglevel debug" */
/*   ready "" */
/*   directory "." */
/* } */

// Uncomment next task definition only when you base on mountebank with following fixes applied:
// https://github.com/bbyars/mountebank/commit/a57155620070ec14bd51178995a1ee678a81b905
// https://github.com/bbyars/mountebank/commit/a4b13a1ef9fbc9b591002a17e2c47fb2e67cea1f
task startMounteBank(type: ExecWait) {
  command "../mountebank/bin/mb"
  ready "point your browser to http://localhost:2525"
  ready ""
  directory "."
}


task initStubs(dependsOn: "startMounteBank", type: ExecWait) {
  command "curl -X POST -d@./src/test/resources/imposter.json http://localhost:2525/imposters"
  directory "."
  logOutput true
  requiredActivePort 2525
}

task startRedis(type: ExecWait) {
  command "redis-server"
  ready "The server is now ready to accept connections"
  directory "."
}

task stopEnv(type: FreePorts) {
  // port: 2525 - mb (MounteBank), 
  // port: 6379 - redis-server (Redis data store)
  ports = [2525, 6379]
}

// Important: without mustRunAfter there could be a conflict between runEnv and CleanEnv if they are used 
// in test.dependsOn and test.finalizedBy
initStubs.mustRunAfter stopEnv
startRedis.mustRunAfter stopEnv

task cleanDEnv(dependsOn: "stopEnv") {
  description "Stop servers used for testing and development"
}

task runDEnv(dependsOn: [stopEnv, initStubs, startRedis]) {
  description "Start servers required for development: MounteBank (external API stubs), Redis key/value store"
}

task cleanREnv(dependsOn: "stopEnv") {
  description "Stop servers used for runtime"
}

task runREnv(dependsOn: [stopEnv, startRedis]) {
  description "Start servers required for runtime: Redis key/value store"
}

task runDevEnv(dependsOn: [stopEnv, initStubs, startRedis]) {
  description "Start servers required for testing: MounteBank and Redis"
}

task runRuntimeEnv(dependsOn: [stopEnv, startRedis]) {
  description "Start servers required for runtime: Redis key/value store"
}

// Important: before running any test initialize environment, so run server with stubs and redis key/value store
// When tests are finished clean environment. Shutdown stubs server and redis key/value store.
test.dependsOn runDevEnv
test.finalizedBy cleanDEnv

// Important: before run command start servers required for runtime: Redis
run.dependsOn runRuntimeEnv

// Run tests in parallel.
def forks = Math.max(2, (int)(Runtime.runtime.availableProcessors() / 2))
test {
  maxParallelForks = forks
}

/**
 *  Task for running external tool and waiting for it.
 *  http://fbflex.wordpress.com/2013/03/14/gradle-madness-execwait-a-task-that-waits-for-commandline-calls-to-be-ready/#comments
 */
class ExecWait extends DefaultTask {
  String command
  String ready
  String directory
  Boolean logOutput = false
  Integer requiredActivePort

  @TaskAction def spawnProcess() {
    if (requiredActivePort) {
      boolean running = false
      for(int i=0; i < 3; i++) {
        def cmd = "lsof -Fp -i :$requiredActivePort"
        def process = cmd.execute()
        process.in.eachLine { line ->
          running = true
        }
        if (!running) {
          sleep(2000)
        }
        else {
          break
        }
      }
    }
    ProcessBuilder builder = new ProcessBuilder(command.split(" "))
    builder.redirectErrorStream(true)
    builder.directory(new File(directory))
    Process process = builder.start()

    InputStream stdout = process.getInputStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

    if (ready || logOutput) {
      println " === OUTPUT"
      def line 
      while((line = reader.readLine()) != null) {
        println line
        if (ready && line.contains(ready)) {
          println "$command is ready"
          break
        }
      }
      println " ==="
    }
  }
}

/**
 *  Kill processes (works in unix based systems) running on the given ports.
 */
class FreePorts extends DefaultTask {
  List ports = []

  @TaskAction
  def freePorts() {
    println " === FreePorts Task started: $ports"
    if (!ports) {
      return
    }
    ports.each { port ->
      def cmd = "lsof -Fp -i :$port"
      def process = cmd.execute()
      process.in.eachLine { line ->
        def killCmd = "kill -9 ${line.substring(1)}"
        def killProcess = killCmd.execute()
        killProcess.waitFor()
        println " === Process killed on port: $port"
      }
    }
  }
}

